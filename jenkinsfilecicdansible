pipeline
{
agent any
stages
{
 stage ('scm checkout')
 { steps {
     git branch: 'master', url: 'https://github.com/prakashk0301/maven-project/'
         }
 }
 
 stage ('code compile')
 {
     steps {
             withMaven(jdk: 'localjava', maven: 'Localmaven') 
              {   sh 'mvn compile'  }

           }
 }


stage ('unit test framework')
{
    steps {
        withMaven(jdk: 'localjava', maven: 'Localmaven') 
         { sh 'mvn test' }

    }
}


stage ('create package')
{
    steps {
        withMaven(jdk: 'localjava', maven: 'Localmaven') 
         { sh 'mvn package' }

    }
}

stage ('publish overs shh- send artifacts from workspace to playbooks directory')
{
steps
{ sshPublisher(publishers: [sshPublisherDesc(configName: 'ansible-master', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '//etc//ansible//playbooks', remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'webapp/target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])

}

}

stage('run playbook to deploy artifacts from playbooks directory to ansible node instances')

{
 steps
 {sshPublisher(publishers: [sshPublisherDesc(configName: 'ansible-master', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'ansible-playbook /etc/ansible/playbooks/ci-cd-playbook.yml', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '//etc//ansible//playbooks', remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'ci-cd-playbook.yml')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])}
}

}
}
